import { ApifyClient } from 'apify-client';
import {
  isValidInstagramLink,
  isValidTikTokLink,
  isValidYouTubeLink,
  logger,
} from '../utils';
import databaseService from './databaseService';

// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ===
const platforms = {
  instagram: {
    actor: 'apify/instagram-reel-scraper',
    label: 'Instagram',
    configureInput: (links: string[]) => ({
      includeSharesCount: true,
      resultsLimit: 10000,
      username: links,
    }),
  },
  youtube: {
    actor: 'streamers/youtube-shorts-scraper',
    label: 'YouTube',
    configureInput: (links: string[]) => ({
      maxResultsShorts: 1000,
      channels: links,
    }),
  },
  tiktok: {
    actor: 'clockworks/tiktok-video-scraper',
    label: 'TikTok',
    configureInput: (links: string[]) => ({
      postURLs: links,
      resultsPerPage: 100,
      scrapeRelatedVideos: false,
      shouldDownloadCovers: false,
      shouldDownloadSlideshowImages: false,
      shouldDownloadSubtitles: false,
      shouldDownloadVideos: false,
    }),
  },
} as const;

// === –¢–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –∫–ª—é—á–∞–º –æ–±—ä–µ–∫—Ç–∞ ===
export type Platform = keyof typeof platforms;

// –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ Apify
export const apifyService = {
  // === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ===
  async processPlatform({
    platform,
    links,
    clientId,
    retry = false,
  }: {
    platform: Platform;
    links: string[];
    clientId: number;
    retry?: boolean;
  }): Promise<{ platform: Platform; items: object[] }> {
    const { actor, label, configureInput } = platforms[platform];

    const task = async () => {
      // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á Apify
      const token = await databaseService.checkAndSelectKey();
      if (!token) {
        // salebotService.sendNoTokensMessage();
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ Apify –∫–ª—é—á–∏');
      }

      // 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
      const client = new ApifyClient({ token });
      const actorInput = configureInput(links);

      try {
        // 3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º actor
        const run = await client.actor(actor).call(actorInput);
        logger.info(
          `üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${label} (${links.length} —Å—Å—ã–ª–æ–∫) –¥–ª—è ${clientId}`
        );

        const datasetUrl = `https://console.apify.com/storage/datasets/${run.defaultDatasetId}`;
        logger.info(
          `üíæ –î–∞—Ç–∞—Å–µ—Ç ${label} (${links.length} —Å—Å—ã–ª–æ–∫) –¥–ª—è ${clientId} –≥–æ—Ç–æ–≤: ${datasetUrl}`
        );

        // 4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        databaseService.updateBalance(token);

        // 5Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const dataset = await client.dataset(run.defaultDatasetId).listItems();
        const items: object[] = dataset.items;

        logger.log(
          `‚úÖ –û–∫–æ–Ω—á–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ ${label} (${links.length} —Å—Å—ã–ª–æ–∫) –¥–ª—è ${clientId} –¥–ª—è ${clientId}`
        );

        return { platform, items };
      } catch (error) {
        let message = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

        if (error instanceof Error) {
          message = error.message;
        } else if (typeof error === 'string') {
          message = error;
        } else if (typeof error === 'object' && error !== null) {
          message = JSON.stringify(error);
        }

        logger.error(`‚ùå –û—à–∏–±–∫–∞ ${label}`, message);

        // üö® –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        if (
          message.includes('authentication token is not valid') ||
          message.includes('User was not found')
        ) {
          logger.warn(
            `üîÅ –¢–æ–∫–µ–Ω ${token} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ`
          );
          await databaseService.changeStatus(token, false);

          if (!retry) {
            return this.processPlatform({
              platform,
              links,
              clientId,
              retry: true,
            });
          } else {
            logger.error(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è ${label} —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å`);
          }
        }

        // üí• –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        throw new Error(`–û—à–∏–±–∫–∞ ${label}: ${message}`);
      }
    };

    return task();
  },

  // === –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º ===
  splitLinksByPlatform(links: string[]) {
    const grouped: Record<string, string[]> = {
      instagram: [],
      youtube: [],
      tiktok: [],
    };

    for (const link of links) {
      if (isValidInstagramLink(link)) grouped.instagram.push(link);
      else if (isValidYouTubeLink(link)) grouped.youtube.push(link);
      else if (isValidTikTokLink(link)) grouped.tiktok.push(link);
    }

    return grouped;
  },
};
